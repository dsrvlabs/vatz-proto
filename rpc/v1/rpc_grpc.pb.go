// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/vatz/rpc/v1/rpc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VatzRPCClient is the client API for VatzRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VatzRPCClient interface {
	PluginStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PluginStatusResponse, error)
}

type vatzRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewVatzRPCClient(cc grpc.ClientConnInterface) VatzRPCClient {
	return &vatzRPCClient{cc}
}

func (c *vatzRPCClient) PluginStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PluginStatusResponse, error) {
	out := new(PluginStatusResponse)
	err := c.cc.Invoke(ctx, "/vatz.rpc.VatzRPC/PluginStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VatzRPCServer is the server API for VatzRPC service.
// All implementations must embed UnimplementedVatzRPCServer
// for forward compatibility
type VatzRPCServer interface {
	PluginStatus(context.Context, *emptypb.Empty) (*PluginStatusResponse, error)
	mustEmbedUnimplementedVatzRPCServer()
}

// UnimplementedVatzRPCServer must be embedded to have forward compatible implementations.
type UnimplementedVatzRPCServer struct {
}

func (UnimplementedVatzRPCServer) PluginStatus(context.Context, *emptypb.Empty) (*PluginStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginStatus not implemented")
}
func (UnimplementedVatzRPCServer) mustEmbedUnimplementedVatzRPCServer() {}

// UnsafeVatzRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VatzRPCServer will
// result in compilation errors.
type UnsafeVatzRPCServer interface {
	mustEmbedUnimplementedVatzRPCServer()
}

func RegisterVatzRPCServer(s grpc.ServiceRegistrar, srv VatzRPCServer) {
	s.RegisterService(&VatzRPC_ServiceDesc, srv)
}

func _VatzRPC_PluginStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VatzRPCServer).PluginStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vatz.rpc.VatzRPC/PluginStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VatzRPCServer).PluginStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// VatzRPC_ServiceDesc is the grpc.ServiceDesc for VatzRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VatzRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vatz.rpc.VatzRPC",
	HandlerType: (*VatzRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PluginStatus",
			Handler:    _VatzRPC_PluginStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vatz/rpc/v1/rpc.proto",
}
