// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: proto/vatz/manager/v2/endpoint.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EndpointService_ListPlugin_FullMethodName   = "/vatz.manager.v2.EndpointService/ListPlugin"
	EndpointService_DetailPlugin_FullMethodName = "/vatz.manager.v2.EndpointService/DetailPlugin"
)

// EndpointServiceClient is the client API for EndpointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndpointServiceClient interface {
	ListPlugin(ctx context.Context, in *ListPluginRequest, opts ...grpc.CallOption) (*ListPluginResponse, error)
	DetailPlugin(ctx context.Context, in *DetailPluginRequest, opts ...grpc.CallOption) (*DetailPluginResponse, error)
}

type endpointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEndpointServiceClient(cc grpc.ClientConnInterface) EndpointServiceClient {
	return &endpointServiceClient{cc}
}

func (c *endpointServiceClient) ListPlugin(ctx context.Context, in *ListPluginRequest, opts ...grpc.CallOption) (*ListPluginResponse, error) {
	out := new(ListPluginResponse)
	err := c.cc.Invoke(ctx, EndpointService_ListPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointServiceClient) DetailPlugin(ctx context.Context, in *DetailPluginRequest, opts ...grpc.CallOption) (*DetailPluginResponse, error) {
	out := new(DetailPluginResponse)
	err := c.cc.Invoke(ctx, EndpointService_DetailPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndpointServiceServer is the server API for EndpointService service.
// All implementations must embed UnimplementedEndpointServiceServer
// for forward compatibility
type EndpointServiceServer interface {
	ListPlugin(context.Context, *ListPluginRequest) (*ListPluginResponse, error)
	DetailPlugin(context.Context, *DetailPluginRequest) (*DetailPluginResponse, error)
	mustEmbedUnimplementedEndpointServiceServer()
}

// UnimplementedEndpointServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEndpointServiceServer struct {
}

func (UnimplementedEndpointServiceServer) ListPlugin(context.Context, *ListPluginRequest) (*ListPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlugin not implemented")
}
func (UnimplementedEndpointServiceServer) DetailPlugin(context.Context, *DetailPluginRequest) (*DetailPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailPlugin not implemented")
}
func (UnimplementedEndpointServiceServer) mustEmbedUnimplementedEndpointServiceServer() {}

// UnsafeEndpointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndpointServiceServer will
// result in compilation errors.
type UnsafeEndpointServiceServer interface {
	mustEmbedUnimplementedEndpointServiceServer()
}

func RegisterEndpointServiceServer(s grpc.ServiceRegistrar, srv EndpointServiceServer) {
	s.RegisterService(&EndpointService_ServiceDesc, srv)
}

func _EndpointService_ListPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServiceServer).ListPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EndpointService_ListPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServiceServer).ListPlugin(ctx, req.(*ListPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EndpointService_DetailPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServiceServer).DetailPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EndpointService_DetailPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServiceServer).DetailPlugin(ctx, req.(*DetailPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EndpointService_ServiceDesc is the grpc.ServiceDesc for EndpointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EndpointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vatz.manager.v2.EndpointService",
	HandlerType: (*EndpointServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPlugin",
			Handler:    _EndpointService_ListPlugin_Handler,
		},
		{
			MethodName: "DetailPlugin",
			Handler:    _EndpointService_DetailPlugin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vatz/manager/v2/endpoint.proto",
}
