// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerPluginClient is the client API for ManagerPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerPluginClient interface {
	Init(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PluginInfo, error)
	Verify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VerifyInfo, error)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
}

type managerPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerPluginClient(cc grpc.ClientConnInterface) ManagerPluginClient {
	return &managerPluginClient{cc}
}

func (c *managerPluginClient) Init(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PluginInfo, error) {
	out := new(PluginInfo)
	err := c.cc.Invoke(ctx, "/pilot.plugin.ManagerPlugin/init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerPluginClient) Verify(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VerifyInfo, error) {
	out := new(VerifyInfo)
	err := c.cc.Invoke(ctx, "/pilot.plugin.ManagerPlugin/verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerPluginClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, "/pilot.plugin.ManagerPlugin/execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerPluginServer is the server API for ManagerPlugin service.
// All implementations must embed UnimplementedManagerPluginServer
// for forward compatibility
type ManagerPluginServer interface {
	Init(context.Context, *emptypb.Empty) (*PluginInfo, error)
	Verify(context.Context, *emptypb.Empty) (*VerifyInfo, error)
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	mustEmbedUnimplementedManagerPluginServer()
}

// UnimplementedManagerPluginServer must be embedded to have forward compatible implementations.
type UnimplementedManagerPluginServer struct {
}

func (UnimplementedManagerPluginServer) Init(context.Context, *emptypb.Empty) (*PluginInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedManagerPluginServer) Verify(context.Context, *emptypb.Empty) (*VerifyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedManagerPluginServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedManagerPluginServer) mustEmbedUnimplementedManagerPluginServer() {}

// UnsafeManagerPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerPluginServer will
// result in compilation errors.
type UnsafeManagerPluginServer interface {
	mustEmbedUnimplementedManagerPluginServer()
}

func RegisterManagerPluginServer(s grpc.ServiceRegistrar, srv ManagerPluginServer) {
	s.RegisterService(&ManagerPlugin_ServiceDesc, srv)
}

func _ManagerPlugin_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerPluginServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pilot.plugin.ManagerPlugin/init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerPluginServer).Init(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerPlugin_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerPluginServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pilot.plugin.ManagerPlugin/verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerPluginServer).Verify(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerPlugin_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerPluginServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pilot.plugin.ManagerPlugin/execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerPluginServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerPlugin_ServiceDesc is the grpc.ServiceDesc for ManagerPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pilot.plugin.ManagerPlugin",
	HandlerType: (*ManagerPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "init",
			Handler:    _ManagerPlugin_Init_Handler,
		},
		{
			MethodName: "verify",
			Handler:    _ManagerPlugin_Verify_Handler,
		},
		{
			MethodName: "execute",
			Handler:    _ManagerPlugin_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dsrv/api/node_manager/plugin/manager_plugin.proto",
}
